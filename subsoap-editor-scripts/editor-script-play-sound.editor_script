local M = {}
M.VERBOSE = false

local function file_exists(name)
    local f=io.open(name,"r")
    if f~=nil then io.close(f) return true else return false end
end

local function get_filename(path)   
    local main, filename, extension = path:match("(.-)([^\\/]-%.?([^%.\\/]*))$")
    return main, filename
end

local function lines_from(file)
    if not file_exists(file) then return {} end
    lines = {}
    for line in io.lines(file) do 
        lines[#lines + 1] = line
    end
    return lines
end

local function is_sound_component(node_id)
    local path = editor.get(node_id, "path")
    return path:find(".sound", nil, true)
end

local function read_sound_component(path)
    local file = lines_from(path)
    local audio_path = string.match(file[1], [[sound: "([^"]+)]])
    return "." .. audio_path
end

local function is_sound_file(node_id)
    local path = editor.get(node_id, "path")
    return path:find(".wav", nil, true) or path:find(".ogg", nil, true)
end

function M.get_commands()
    return {
        {
            label = "Play Sound Component",
            locations = {"Assets", "Outline"},
            query = {
                selection = { type = "resource", cardinality = "one" }
            },
            active = function(opts)
                if not is_sound_component(opts.selection) then
                    return false
                end
                return true
            end,
            run = function(opts)
                if M.VERBOSE then print("Play Sound Component: Run") end
                local path = editor.get(opts.selection, "path")
                if M.VERBOSE then print("path: ", path) end

                local main, filename = get_filename(path)
                local target_path = "." .. main .. filename:match("(.+)%..+") .. ".sound"

                local sound_file = ""
                
                if file_exists(target_path) then
                    sound_file = read_sound_component(target_path)
                end
                
                print("If you do not have ffplay installed you must install it and add it to your path.")
                print("Attempting to play " .. sound_file .. " with ffplay... wait until a new line prints in console to know when it's done.")
                return {
                    {
                        action = "shell", 
                        command = {"ffplay", sound_file, "-loglevel", "warning", "-autoexit", "-nodisp"}
                    }
                }
            end,
        },
        {
            label = "Play Sound File",
            locations = {"Assets"},
            query = {
                selection = { type = "resource", cardinality = "one" }
            },
            active = function(opts)
                if not is_sound_file(opts.selection) then
                    return false
                end
                return true
            end,
            run = function(opts)
                if M.VERBOSE then print("Play Sound File: Run") end
                local path = "." .. editor.get(opts.selection, "path")
                if M.VERBOSE then print("path: ", path) end

                print("If you do not have ffplay installed you must install it and add it to your path.")
                print("Attempting to play " .. path .. " with ffplay... wait until a new line prints in console to know when it's done.")
                return {
                    {
                        action = "shell", 
                        command = {"ffplay", path, "-loglevel", "warning", "-autoexit", "-nodisp"}
                    }
                }
            end,             
        }

    }
end

return M
